#!/usr/bin/env python3

import rospy
import rospkg
import std_msgs.msg
from geometry_msgs.msg import Twist, Pose2D, PoseStamped
from nav_msgs.msg import Odometry
import numpy as np

expect_x = [-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-1.3,
-0.9,
-0.895,
-0.89,
-0.885,
-0.88,
-0.875,
-0.87,
-0.865,
-0.86,
-0.855,
-0.85,
-0.845,
-0.84,
-0.835,
-0.83,
-0.825,
-0.82,
-0.815,
-0.81,
-0.805,
-0.8,
-0.7925,
-0.785,
-0.7775,
-0.77,
-0.7625,
-0.755,
-0.7475,
-0.74,
-0.7325,
-0.725,
-0.7175,
-0.71,
-0.7025,
-0.695,
-0.6875,
-0.68,
-0.6725,
-0.665,
-0.6575,
-0.65,
-0.6425,
-0.635,
-0.6275,
-0.62,
-0.6125,
-0.605,
-0.5975,
-0.59,
-0.5825,
-0.575,
-0.5675,
-0.56,
-0.5525,
-0.545,
-0.5375,
-0.53,
-0.5225,
-0.515,
-0.5075,
-0.5,
-0.4925,
-0.485,
-0.4775,
-0.47,
-0.4625,
-0.455,
-0.4475,
-0.44,
-0.4325,
-0.425,
-0.5175,
-0.51,
-0.5025,
-0.495,
-0.4875,
-0.48,
-0.4725,
-0.465,
-0.4575,
-0.45,
-0.4425,
-0.435,
-0.4275,
-0.42,
-0.4125,
-0.405,
-0.3975,
-0.39,
-0.3825,
-0.375,
-0.3675,
-0.36,
-0.3525,
-0.345,
-0.3375,
-0.33,
-0.3225,
-0.315,
-0.3075,
-0.3,
-0.2925,
-0.285,
-0.2775,
-0.27,
-0.2625,
-0.255,
-0.2475,
-0.24,
-0.2325,
-0.225,
-0.2175,
-0.21,
-0.2025,
-0.195,
-0.1875,
-0.18,
-0.1725,
-0.165,
-0.1575,
-0.15,
-0.1425,
-0.135,
-0.1275,
-0.12,
-0.1125,
-0.105,
-0.0975,
-0.09,
-0.0825,
-0.075,
-0.0675,
-0.06,
-0.0525,
-0.045,
-0.0375,
-0.03,
-0.0225,
-0.015,
-0.0075,
0,
0.0075,
0.015,
0.0225,
0.03,
0.0375,
0.045,
0.0525,
0.06,
0.0675,
0.075,
0.0825,
0.09,
0.0975,
0.105,
0.1125,
0.12,
0.1275,
0.135,
0.1425,
0.15,
0.1575,
0.165,
0.1725,
0.18,
0.1875,
0.195,
0.2025,
0.21,
0.2175,
0.225,
0.2325,
0.24,
0.2475,
0.255,
0.2625,
0.27,
0.2775,
0.285,
0.2925,
0.3,
0.3075,
0.315,
0.3225,
0.33,
0.3375,
0.345,
0.3525,
0.36,
0.3675,
0.375,
0.3825,
0.39,
0.3975,
0.405,
0.4125,
0.42,
0.4275,
0.435,
0.4425,
0.45,
0.4575,
0.465,
0.4725,
0.48,
0.4875,
0.495,
0.5025,
0.51,
0.5175,
0.525,
0.5325,
0.54,
0.5475,
0.555,
0.5625,
0.57,
0.5775,
0.585,
0.5925,
0.6,
0.6075,
0.615,
0.6225,
0.63,
0.6375,
0.645,
0.6525,
0.66,
0.6675,
0.675,
0.6825,
0.69,
0.7975,
0.805,
0.8125,
0.82,
0.8275,
0.835,
0.8425,
0.85,
0.8575,
0.865,
0.8725,
0.88,
0.8875,
0.895,
0.9025,
0.91,
0.9175,
0.925,
0.9325,
0.94,
0.9475,
0.955,
0.9625,
0.97,
0.9775,
0.985,
0.9925,
1,
1.005,
1.01,
1.015,
1.02,
1.025,
1.03,
1.035,
1.04,
1.045,
1.05,
1.055,
1.06,
1.065,
1.07,
1.075,
1.08,
1.085,
1.09,
1.095,
1.1,
1.105,
1.11,
1.115,
1.12,
1.125,
1.13,
1.135,
1.14,
1.145,
1.15,
1.155,
1.16,
1.165,
1.17,
1.175,
1.18,
1.185,
1.19,
1.195]

expect_y = [1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0.0001,
0.0002,
0.0005,
0.001,
0.0016,
0.0023,
0.0031,
0.004,
0.0051,
0.0063,
0.0077,
0.0091,
0.0107,
0.0124,
0.0143,
0.0162,
0.0183,
0.0205,
0.0228,
0.0252,
0.0277,
0.0303,
0.0331,
0.0359,
0.0389,
0.042,
0.0451,
0.0484,
0.0518,
0.0552,
0.0588,
0.0624,
0.0662,
0.07,
0.0739,
0.0779,
0.0819,
0.0861,
0.0903,
0.0945,
0.0989,
0.1033,
0.1077,
0.1122,
0.1168,
0.1214,
0.1261,
0.1308,
0.1356,
0.1404,
0.513,
0.5252,
0.5374,
0.5497,
0.5621,
0.5745,
0.5869,
0.5993,
0.6118,
0.6243,
0.6368,
0.6493,
0.6618,
0.6743,
0.6867,
0.6991,
0.7114,
0.7237,
0.736,
0.7481,
0.7602,
0.7722,
0.7841,
0.7959,
0.8076,
0.8191,
0.8306,
0.8419,
0.853,
0.864,
0.8749,
0.8856,
0.8961,
0.9064,
0.9166,
0.9265,
0.9363,
0.9458,
0.9552,
0.9643,
0.9732,
0.9818,
0.9902,
0.9984,
1.0064,
1.014,
1.0214,
1.0286,
1.0355,
1.0421,
1.0484,
1.0545,
1.0602,
1.0657,
1.0709,
1.0758,
1.0803,
1.0846,
1.0886,
1.0923,
1.0956,
1.0986,
1.1014,
1.1038,
1.1058,
1.1076,
1.109,
1.1101,
1.1109,
1.1114,
1.1115,
1.1114,
1.1108,
1.11,
1.1088,
1.1074,
1.1056,
1.1034,
1.101,
1.0982,
1.0952,
1.0918,
1.0881,
1.084,
1.0797,
1.0751,
1.0702,
1.065,
1.0594,
1.0536,
1.0476,
1.0412,
1.0345,
1.0276,
1.0204,
1.013,
1.0053,
0.9973,
0.9891,
0.9806,
0.9719,
0.963,
0.9539,
0.9445,
0.9349,
0.9252,
0.9152,
0.905,
0.8946,
0.8841,
0.8734,
0.8625,
0.8515,
0.8403,
0.829,
0.8175,
0.806,
0.7943,
0.7825,
0.7705,
0.7585,
0.7464,
0.7343,
0.722,
0.7097,
0.6974,
0.685,
0.6725,
0.6601,
0.6476,
0.6351,
0.6226,
0.6101,
0.5976,
0.5852,
0.5727,
0.5603,
0.548,
0.5357,
0.5235,
0.5114,
0.4993,
0.4873,
0.4754,
0.4637,
0.452,
0.4404,
0.429,
0.4178,
0.4066,
0.3956,
0.3848,
0.3742,
0.3637,
0.3534,
0.3433,
0.3333,
0.3236,
0.3141,
0.3048,
0.2957,
0.2869,
0.0513,
0.048,
0.0447,
0.0415,
0.0385,
0.0355,
0.0327,
0.03,
0.0273,
0.0248,
0.0224,
0.0201,
0.018,
0.0159,
0.014,
0.0122,
0.0105,
0.0089,
0.0075,
0.0062,
0.005,
0.0039,
0.003,
0.0022,
0.0015,
0.0009,
0.0005,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002,
0.0002]

global e_x_1, e_y_1, e_theta_1, Ee_x, Ee_y, Ee_theta, u_x_1, u_y_1, u_theta_1, x_1, y_1, theta_1, i_g

#定义PID全局变量
e_x_1 = 0
e_y_1 = 0
e_theta_1 = 0
Ee_x = 0
Ee_y = 0
Ee_theta = 0
u_x_1 = 0.0
u_y_1 = 0.0
u_theta_1 = 0
x_1 = 0
y_1 = 0
theta_1 = 0
i_g = 0

#设置PID参数
kp = 0.5
ki = 0
kd = 0.02

vel_max = 1
angular_max = 0.3
thrhd_val = 0.01
expect_theta = 1.5

def callback(msg):

    global e_x_1, e_y_1, e_theta_1, Ee_x, Ee_y, Ee_theta, u_x_1, u_y_1, u_theta_1, x_1, y_1, theta_1, i_g
    
    x = msg.pose.position.x
    y = msg.pose.position.y
    theta = msg.pose.position.z
    rc = "pose_x: " + str(x) + " pose_y: " + str(y) + " pose_z: " + str(theta)
    rospy.loginfo(rc)

    e_x = expect_x[i_g] - x
    u_x = kp * e_x + ki * Ee_x + kd * (e_x - e_x_1)
    Ee_x += e_x
    u_x_1 = u_x
    x_1 = x
    e_x_1 = e_x

    e_y = expect_y[i_g] - y
    u_y = 1.2 * kp * e_y + ki * Ee_y + kd * (e_y - e_y_1) #此处给y方向增加系数
    Ee_y += e_y
    u_y_1 = u_y
    y_1 = y
    e_y_1 = e_y

    e_theta = expect_theta - theta
    u_theta = kp * e_theta + ki * Ee_theta + kd * (e_theta - e_theta_1)
    Ee_theta += e_theta
    u_theta_1 = u_theta
    theta_1 = theta
    e_theta_1 = e_theta

    if u_x > vel_max:
        u_x = vel_max
    if u_x < -vel_max: 
        u_x = -vel_max
    if u_y > vel_max:
        u_y = vel_max
    if u_y < -vel_max:
        u_y = -vel_max
    if u_theta > angular_max:
        u_theta = angular_max
    if u_theta < -angular_max:
        u_theta = -angular_max
    if e_x < thrhd_val and e_x > -thrhd_val:
        u_x = 0
    if e_y < thrhd_val and e_y > -thrhd_val:
        u_y = 0

    vel_msg = Twist()
    vel_msg.linear.x = u_x
    vel_msg.linear.y = u_y
    vel_msg.linear.z=u_theta

    pub.publish(vel_msg)

    if i_g < 319:
        i_g += 1

if __name__ == '__main__':

    rospy.init_node('pos_track', anonymous=True)
    sub = rospy.Subscriber('/pose', PoseStamped, callback, queue_size=10)
    pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
    rospy.spin()